leetcode.com - сайт с практикой

Создать тестовы проект Spring Boot
	Для проверки работы Swager iu
	Для проверки работы spring boot actuator
	Для проверки docker compose
	Для проверки Hibernate
	Для проверки Mapstruct
	Для проверки Controller test (WireMock)
    Добавить константы - private static final

- Евгений Борисов
- Обновить раздел - Структуры данных
- Разобраться с датами
- Скопировать себе картинки и описание из Amigo...
- Просмотреть - https://www.youtube.com/watch?v=wyABTfR9UTU
- Просмотреть - https://www.youtube.com/watch?v=FjfgIImzhxc
- Просмотреть - https://www.youtube.com/watch?v=IqHaGd9J42s
- Просмотреть собеседования - https://www.youtube.com/@Jetbulb/videos
- Просмотреть многопоточность - https://jenkov.com/tutorials/java-concurrency/locks.html
- Spark actions
- RDD vs. DataFrame vs. Dataset
- Просмотреть https://www.youtube.com/watch?v=Pvkw8_zKa50 - Зачем нужна Scala, когда есть Java 21 — Тинькофф ИТ-фест

Почему в Java.html кнопка назад выше чем высота соседнего блока
Запустить проект на Tomcat(возможно будут работать относительные пути)
Сделать шаблон страницы для быстрого и точного заполнения. C JAVA
Замерить время за сколько я прочитаю весь материал.

Проходить курсы из раздела "Источники для обучения"

Приоритет технологий:
Kafka
Spring
    Validation
Spring Boot
Concurrency
Cloud Technology
Akka
Как сделать https
Сессия и токен
Работа с jacoco
Работа с SonarQube

Swagger для документации.
    Mandatory

    hibernate
        casscad-type в аннотациях связей
        flash
        entity-manager

   Spring
        @controllerAdviced

Как стать DevOps-инженером?
1.Сразу напишем небольшое приложение. Язык выбираем абсолютно любой. Приложение будет отдавать информацию о пользователях через HTTP. По сути, простенькое API.
2.Теперь давайте добавим работу с базой: пусть наши пользователи хранятся в базе. Идеально структуру базы хранить рядом с кодом и научиться прогонять миграции при новых изменениях. Таким образом ваше приложение само синхронизирует базу до нужной структуры.
3.Регистрируемся на GitHub/Bitbucket и закидываем весь исходный код нашего приложения туда.
4.На своей машине поднимаем Jenkins/TeamCity и настраиваем автоматическую сборку приложения из нашего репозитория по кнопке.
5.Усложняем задачу. Настроим webhooks на GitHub/Bitbucket, которые будут автоматически запускать сборку на Jenkins/TeamCity.
6.Добавим тестов в Jenkins: как минимум можно прогонять линтер по нашему коду или набросать unit-тесты.
7.Переключимся на настройку dev окружения. Берём в руки Ansible, Chef, Puppet или SaltStack и настраиваем виртуалку с нуля: создаем пользователей, устанавливаем необходимые библиотеки и зависимости.
8.Подводим все это дело под Vagrant: виртуалка должна автоматически подниматься и настраиваться.
9.Подключаем vagrant к Jenkins с помощью соответствующего плагина: при пуше в Git наше приложение собирается, и поднимается виртуальное окружение с помощью Vagrant + Configuration System Management.
10.Ищем best practices по деплою приложений на языке, который вы выбрали. Можно заворачивать всё в deb-пакеты, можно деплоить Ruby с помощью Capistrano. Главное — выбрать решение.
11.Выбор сделан, реализуем его и конфигурируем Jenkins, чтобы после пуша в репозиторий, Jenkins, помимо сборки приложения и развертывания окружения, выкладывал и запускал наш код.
12.Добавляем смоук-тесты: после запуска Jenkins должен запросить список пользователей у нашего API и убедиться, что получает ответ.
13.Добавляем мониторинг нашего проекта: изучаем time series базы, настраиваем prometheus, grafana, автоматически подключаем новый инстанс нашего приложения к мониторингу.
14.Улучшаем мониторинг: интегрируемся со Slack и PagerDuty, чтобы получать нотификации.
15.Читаем про Docker, пишем Dockerfile и оборачиваем наше приложение.
16.Изучаем увлекательные статьи про настройку систем оркестрации Swarm, Kubernetes, Rancher Cattle. Следуем рекомендациям и поднимаем кластер.
17.Меняем Jenkins: собираем Docker-образ, прогоняем тесты, запускаем собранный докер на кластере Kubernetes, проводим smoke-тесты, вводим наше приложение в балансировку.

Сайт для создание ботов:
    https://axiom.ai/

Когда можно получить и как избежать LazyIntExeption
@Transaction Propagation
saveAndFlush
Spring Security

Josias De Lima Moreno
    Specialties: Big Data architecture, Automatization, Virtualization, HA-Systems, and DevOps.
    Coding languages:
    - Python: automation, deployment, and data analysis scripts.
    - Bash: automation for sysadmin tasks such as backup, monitoring, deployment, terminating, in Linux and Windows.
    - PHP/CSS/HTML: basic web development, particularly using Wordpress.
    - C++: development of hardware embedded programs.
    Frameworks: Apache Hadoop (Hadoop core and Cloudera distribution), and Django.
    Databases:
    SQL: PostgreSql, MySql.
    NoSQL: MogoDB, HBase.
    Control system: Git, GitLab, and GitHub.
    Platform system: Jenkins, CircleCI, Tableau, and PowerBI.
    Operating Systems: strong skill set with Linux (Debian-based) and Windows.
    Virtualization: Docker, Vagrant, and Hyper-V.
    Cloud Technologies: AWS S3, EC2 (+ autoscaling), ELB, and Lightsail. Microsoft Azure services.

=================================================================================================
m_quiz
    Clint Eastwood
    Jeff Daniels - https://ru.wikipedia.org/wiki/%D0%94%D1%8D%D0%BD%D0%B8%D0%B5%D0%BB%D1%81,_%D0%94%D0%B6%D0%B5%D1%84%D1%84
    Jack Nicholson - https://ru.wikipedia.org/wiki/%D0%9D%D0%B8%D0%BA%D0%BE%D0%BB%D1%81%D0%BE%D0%BD,_%D0%94%D0%B6%D0%B5%D0%BA
    Meg Ryan - https://en.wikipedia.org/wiki/Meg_Ryan_filmography