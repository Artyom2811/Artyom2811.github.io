//Залить все на GIT.
Почему в Java.html кнопка назад выше чем высота соседнего блока
Запустить проект на Tomcat(возможно будут работать относительные пути)
Сделать шаблон страницы для быстрого и точного заполнения. C JAVA
Замерить время за сколько я прочитаю весь материал.

Проходить курсы из раздела "Источники для обучения"

Приоритет технологий:
Kafka
Spring
Spring Boot
Concurrency
Cloud Technology
Akka
Как сделать https
Сессия и токен

Swagger для документации.
    Mandatory

    hibernate
        casscad-type в аннотациях связей
        flash
        entity-manager

   Spring
        @controllerAdviced

Как стать DevOps-инженером?
1.Сразу напишем небольшое приложение. Язык выбираем абсолютно любой. Приложение будет отдавать информацию о пользователях через HTTP. По сути, простенькое API.
2.Теперь давайте добавим работу с базой: пусть наши пользователи хранятся в базе. Идеально структуру базы хранить рядом с кодом и научиться прогонять миграции при новых изменениях. Таким образом ваше приложение само синхронизирует базу до нужной структуры.
3.Регистрируемся на GitHub/Bitbucket и закидываем весь исходный код нашего приложения туда.
4.На своей машине поднимаем Jenkins/TeamCity и настраиваем автоматическую сборку приложения из нашего репозитория по кнопке.
5.Усложняем задачу. Настроим webhooks на GitHub/Bitbucket, которые будут автоматически запускать сборку на Jenkins/TeamCity.
6.Добавим тестов в Jenkins: как минимум можно прогонять линтер по нашему коду или набросать unit-тесты.
7.Переключимся на настройку dev окружения. Берём в руки Ansible, Chef, Puppet или SaltStack и настраиваем виртуалку с нуля: создаем пользователей, устанавливаем необходимые библиотеки и зависимости.
8.Подводим все это дело под Vagrant: виртуалка должна автоматически подниматься и настраиваться.
9.Подключаем vagrant к Jenkins с помощью соответствующего плагина: при пуше в Git наше приложение собирается, и поднимается виртуальное окружение с помощью Vagrant + Configuration System Management.
10.Ищем best practices по деплою приложений на языке, который вы выбрали. Можно заворачивать всё в deb-пакеты, можно деплоить Ruby с помощью Capistrano. Главное — выбрать решение.
11.Выбор сделан, реализуем его и конфигурируем Jenkins, чтобы после пуша в репозиторий, Jenkins, помимо сборки приложения и развертывания окружения, выкладывал и запускал наш код.
12.Добавляем смоук-тесты: после запуска Jenkins должен запросить список пользователей у нашего API и убедиться, что получает ответ.
13.Добавляем мониторинг нашего проекта: изучаем time series базы, настраиваем prometheus, grafana, автоматически подключаем новый инстанс нашего приложения к мониторингу.
14.Улучшаем мониторинг: интегрируемся со Slack и PagerDuty, чтобы получать нотификации.
15.Читаем про Docker, пишем Dockerfile и оборачиваем наше приложение.
16.Изучаем увлекательные статьи про настройку систем оркестрации Swarm, Kubernetes, Rancher Cattle. Следуем рекомендациям и поднимаем кластер.
17.Меняем Jenkins: собираем Docker-образ, прогоняем тесты, запускаем собранный докер на кластере Kubernetes, проводим smoke-тесты, вводим наше приложение в балансировку.

База данных Фильмов:
	https://grouplens.org/datasets/movielens/

Сайт для создание ботов:
    https://axiom.ai/


